{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLI Test\\\\habit-tracker\\\\src\\\\components\\\\HabitCompletionChart.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst HabitCompletionChart = ({\n  habit\n}) => {\n  const data = {\n    labels: [],\n    datasets: [{\n      label: 'Completion',\n      data: [],\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  if (habit.history && habit.history.length > 0) {\n    const dailyCounts = {};\n    habit.history.forEach(entry => {\n      const date = new Date(entry.date);\n      const formattedDate = date.toISOString().split('T')[0];\n      dailyCounts[formattedDate] = (dailyCounts[formattedDate] || 0) + 1;\n    });\n    const sortedDates = Object.keys(dailyCounts).sort();\n    data.labels = sortedDates;\n    data.datasets[0].data = sortedDates.map(date => dailyCounts[date]);\n  }\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: `${habit.name} Completion Over Time`\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_c = HabitCompletionChart;\nexport default HabitCompletionChart;\nvar _c;\n$RefreshReg$(_c, \"HabitCompletionChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","HabitCompletionChart","habit","data","labels","datasets","label","borderColor","tension","history","length","dailyCounts","forEach","entry","date","Date","formattedDate","toISOString","split","sortedDates","Object","keys","sort","map","options","responsive","plugins","legend","position","title","display","text","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CLI Test/habit-tracker/src/components/HabitCompletionChart.js"],"sourcesContent":["\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst HabitCompletionChart = ({ habit }) => {\n  const data = {\n    labels: [],\n    datasets: [\n      {\n        label: 'Completion',\n        data: [],\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1,\n      },\n    ],\n  };\n\n  if (habit.history && habit.history.length > 0) {\n    const dailyCounts = {};\n    habit.history.forEach((entry) => {\n      const date = new Date(entry.date);\n      const formattedDate = date.toISOString().split('T')[0];\n      dailyCounts[formattedDate] = (dailyCounts[formattedDate] || 0) + 1;\n    });\n\n    const sortedDates = Object.keys(dailyCounts).sort();\n    data.labels = sortedDates;\n    data.datasets[0].data = sortedDates.map((date) => dailyCounts[date]);\n  }\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: `${habit.name} Completion Over Time`,\n      },\n    },\n  };\n\n  return (\n    <div className=\"mt-4\">\n      <Line data={data} options={options} />\n    </div>\n  );\n};\n\nexport default HabitCompletionChart;\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBT,OAAO,CAACU,QAAQ,CACdT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAC1C,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,YAAY;MACnBH,IAAI,EAAE,EAAE;MACRI,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED,IAAIN,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACO,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IAC7C,MAAMC,WAAW,GAAG,CAAC,CAAC;IACtBT,KAAK,CAACO,OAAO,CAACG,OAAO,CAAEC,KAAK,IAAK;MAC/B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAACC,IAAI,CAAC;MACjC,MAAME,aAAa,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtDP,WAAW,CAACK,aAAa,CAAC,GAAG,CAACL,WAAW,CAACK,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;IACpE,CAAC,CAAC;IAEF,MAAMG,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACV,WAAW,CAAC,CAACW,IAAI,CAAC,CAAC;IACnDnB,IAAI,CAACC,MAAM,GAAGe,WAAW;IACzBhB,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACF,IAAI,GAAGgB,WAAW,CAACI,GAAG,CAAET,IAAI,IAAKH,WAAW,CAACG,IAAI,CAAC,CAAC;EACtE;EAEA,MAAMU,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,GAAG7B,KAAK,CAAC8B,IAAI;MACrB;IACF;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKkC,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBnC,OAAA,CAACX,IAAI;MAACe,IAAI,EAAEA,IAAK;MAACqB,OAAO,EAAEA;IAAQ;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAACC,EAAA,GA5CItC,oBAAoB;AA8C1B,eAAeA,oBAAoB;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}